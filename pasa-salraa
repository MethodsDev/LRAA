#!/usr/bin/env python
# encoding: utf-8

import sys, os, re
import pysam
import argparse
import subprocess

sys.path.insert(0, os.path.sep.join([os.path.dirname(os.path.realpath(__file__)), "pylib"]))
from splice_graph import splice_graph

import logging
FORMAT = "%(asctime)-15s %(levelname)s %(module)s.%(name)s.%(funcName)s at %(lineno)d :\n\t%(message)s\n"
global logger
logger = logging.getLogger()
logging.basicConfig(filename='pasa-salras.log', format=FORMAT, filemode='w', level=logging.DEBUG)
# add a new Handler to print all INFO and above messages to stdout
ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.INFO)
logger.addHandler(ch)


READ_ALN_GAP_MERGE = 10


def main():

    parser = argparse.ArgumentParser(description="pasa-salraa: short and long read alignment assembler",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("--bam", type=str, required=True, help="target bam file")
    parser.add_argument("--genome", type=str, required=True, help="target genome file")

    args = parser.parse_args()

    genome_fasta_filename = args.genome
    bam_filename = args.bam

    splice_graph = build_splice_graph(genome_fasta_filename,
                                      bam_filename,
                                      READ_ALN_GAP_MERGE)

    
    sys.exit(0)




def build_splice_graph(genome_fasta_filename, bam_file, read_aln_gap_merge):

    # data structures want:
    # ultimately exons and introns
    # build from reads.
    # define coverage intervals and introns as graph components.

    genome_contigs_list = get_genome_contigs_listing(genome_fasta_filename)
    
    for contig in genome_contigs_list:
        sg = splice_graph()
        sg.set_read_aln_gap_merge(read_aln_gap_merge)
        sg.build_splice_graph_for_contig(contig, genome_fasta_filename, bam_file)

        sg.write_intron_exon_splice_graph_bed_files("prereconstruct.{}".format(contig))

        
    
        
    

def get_genome_contigs_listing(genome_fasta_filename):

    fai_file = "{}.fai".format(genome_fasta_filename)
    if not os.path.exists(fai_file):
        subprocess.check_call("samtools faidx {}".format(genome_fasta_filename),
                              shell=True)

    contigs_list = list()
    
    with open(fai_file) as fh:
        for line in fh:
            vals = line.split("\t")
            contig_acc = vals[0]
            contigs_list.append(contig_acc)

    return contigs_list
    
            
if __name__ == '__main__':
    main()
