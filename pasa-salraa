#!/usr/bin/env python

import sys, os, re
import pysam
import argparse

sys.path.insert(0, os.path.sep.join([os.path.dirname(os.path.realpath(__file__)), "pylib"]))
from splice_graph import splice_graph


READ_ALN_GAP_MERGE = 10


def main():

    parser = argparse.ArgumentParser(description="pasa-salraa: short and long read alignment assembler",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("--bam", type=str, required=True, help="target bam file")


    args = parser.parse_args()

    bam_filename = args.bam

    build_splice_graph(bam_filename,
                       READ_ALN_GAP_MERGE)

    
    sys.exit(0)




def build_splice_graph(bam_file, read_aln_gap_merge):

    # data structures want:
    # ultimately exons and introns
    # build from reads.
    # define coverage intervals and introns as graph components.
    
    samfile = pysam.AlignmentFile(bam_file, "rb")

    sg = splice_graph()
    sg.set_read_aln_gap_merge(read_aln_gap_merge)
    
    for read in samfile.fetch():
        print(read)
        aligned_pairs = read.get_blocks()
        print(aligned_pairs)
        
        
    


if __name__ == '__main__':
    main()
